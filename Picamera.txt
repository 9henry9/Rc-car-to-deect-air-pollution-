import picamera

with picamera.PiCamera() as camera:
    camera.resolution = (640, 480)
    camera.rotation = 90
    camera.start_recording('example.mp4', bitrate=2000000)
    camera.wait_recording(30)
    camera.stop_recording()import cv2
import numpy as np

# Load pre-trained model and configuration for object detection
net = cv2.dnn.readNetFromDarknet('path/to/config.cfg', 'path/to/model.weights')
classes = []
with open('path/to/classes.txt', 'r') as f:
    classes = [line.strip() for line in f.readlines()]

# Initialize the Pi Camera
camera = cv2.VideoCapture(0)

while True:
    # Capture frame from the camera
    ret, frame = camera.read()

    # Resize frame and convert it to blob
    blob = cv2.dnn.blobFromImage(frame, 1/255, (416, 416), swapRB=True, crop=False)

    # Set the input blob for the neural network
    net.setInput(blob)

    # Perform forward pass and get the output layer names
    layer_names = net.getLayerNames()
    output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]

    # Run object detection
    outputs = net.forward(output_layers)

    # Process detection results
    class_ids = []
    confidences = []
    boxes = []
    for output in outputs:
        for detection in output:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5:  # Adjust confidence threshold as needed
                center_x = int(detection[0] * frame.shape[1])
                center_y = int(detection[1] * frame.shape[0])
                width = int(detection[2] * frame.shape[1])
                height = int(detection[3] * frame.shape[0])

                # Calculate top-left corner coordinates of bounding box
                x = int(center_x - width / 2)
                y = int(center_y - height / 2)

                # Store detection results
                class_ids.append(class_id)
                confidences.append(float(confidence))
                boxes.append([x, y, width, height])

    # Apply non-maximum suppression to remove overlapping bounding boxes
    indices = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

    # Draw bounding boxes and labels on the frame
    font = cv2.FONT_HERSHEY_SIMPLEX
    colors = np.random.uniform(0, 255, size=(len(classes), 3))
    if len(indices) > 0:
        for i in indices.flatten():
            x, y, w, h = boxes[i]
            label = classes[class_ids[i]]
            confidence = confidences[i]
            color = colors[class_ids[i]]
            cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
            cv2.putText(frame, f"{label}: {confidence:.2f}", (x, y - 10), font, 0.5, color, 2)

    # Display the resulting frame
    cv2.imshow("Object Detection", frame)

    # Exit loop on 'q' key press
    if cv2.waitKey(1) == ord('q'):
        break

# Release resources
camera.release()
cv2.destroyAllWindows()
